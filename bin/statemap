#!/usr/bin/env node

/*
 * Copyright 2017, Joyent, Inc.
 */

var mod_fs = require('fs');
var mod_path = require('path');
var mod_util = require('util');
var mod_assert = require('assert');
var mod_extsprintf = require('extsprintf');
var mod_color = require('color');
var mod_dashdash = require('dashdash');
var mod_concatjson = require('concatjson');
var mod_statemap = require('../build/Release/statemap');

var fatal = function ()
{
	var c = mod_path.basename(process.argv[1]);
	var args = Array.prototype.slice.call(arguments);

	var msg = mod_extsprintf.sprintf.apply(this, args);
	console.error(c + ': ' + msg);

	process.exit(1);
};

var dump = function (obj)
{
	return (mod_util.inspect(obj, { depth: null, maxArrayLength: null }));
};

var check = function (input, field)
{
	if (input.hasOwnProperty(field))
		return;

	fatal('expected property "%s"', field);
};

var out = function ()
{
	var args = Array.prototype.slice.call(arguments);
	var msg = mod_extsprintf.sprintf.apply(this, args);

	console.log(msg);
};

var rectWidth = function (map, index, config)
{
	return ((map[index].duration / config.timeWidth) *
	    config.pixelWidth);
};

var stateColors = function (states)
{
	var defaults = {
		'on-cpu': 'seagreen',
		'off-cpu-waiting': '#f9f9f9',
		'off-cpu-futex': 'white',
		'off-cpu-blocked': 'orangered',
		'off-cpu-io': 'goldenrod',
		'off-cpu-dead': '#303030'
	};

	for (var state in states) {
		var color = states[state].color;

		if (!color)
			color = defaults[states[state].name];

		if (!color) {
			states[state].color = mod_color.rgb([
			    Math.floor(Math.random() * 255),
			    Math.floor(Math.random() * 255),
			    Math.floor(Math.random() * 255) ]);
			continue;
		}

		try {
			states[state].color = mod_color(color);
		} catch (err)  {
			fatal('illegal color "%s" for state "%s"',
			    color, state);
		}
	}
};

var outputMap = function (map, config)
{
	var i;
	var data = [];

	out('<g id="%s%s"><title>%s %s</title>', config.entityPrefix,
	    config.entity, config.entityKind, config.entity);

	for (i = 0; i < map.length; i++) {
		var w = rectWidth(map, i, config);
		var datum = map[i];
		var state = -1;
		var x, color, idx, j;

		if (w === 0)
			continue;

		x = (((datum.time - config.begin) /
		    config.timeWidth) * config.pixelWidth);

		for (j = 0; j < datum.states.length; j++) {
			if (datum.states[j] != 0) {
				if (state != -1)
					break;
				state = j;
			}
		}

		if (j == datum.states.length) {
			mod_assert(state != -1);

			idx = data.length;

			data.push({
				t: datum.time,
				s: state
			});

			out('<rect x="' + x + '" y="%d" width="' + w + '" ' +
			    'height="%d" onclick="mapclick(evt, ' +
			    idx + ')" style="fill:%s" />',
			    config.y,
			    config.stripHeight, config.states[state].color);

			continue;
		}

		var max = state;

		for (j = 0; j < datum.states.length; j++) {
			if (datum.states[j] > datum.states[state])
				max = j;
		}

		color = config.states[max].color;

		var d = {
			t: datum.time,
			s: {}
		};

		for (j = 0; j < datum.states.length; j++) {
			var ratio = 0;

			if (datum.states[j]) {
				ratio = datum.states[j] / datum.duration;
				d.s[j] = Math.round(ratio * 1000) / 1000;
			}

			if (j == max)
				continue;

			color = color.mix(config.states[j].color, ratio);
		}

		idx = data.length;
		data.push(d);

		out('<rect x="' + x + '" y="%d" width="' + w + '" ' +
		    'height="%d" onclick="mapclick(evt, ' + idx +
		    ')" style="fill:%s" />', config.y,
		    config.stripHeight, color);
	}

	out('</g>');

	return (data);
};

var loadLibs = function (config)
{
	var css = [], defs = [];
	var lib, text;
	var i;

	out('<defs>');
	out('  <script type="application/ecmascript"><![CDATA[');

	out('var globals = %s;', dump(config));

	for (i = 0; i < config.libs.length; i++) {
		var components;

		try {
			lib = require.resolve('../lib/' + config.libs[i]);
			text = mod_fs.readFileSync(lib, 'utf8');
		} catch (err) {
			fatal('couldn\'t load library %s: %s', lib, err);
		}

		out('%s', text);

		components = lib.split('.');

		if (components.length > 1)
			components.pop();

		components.push('css');
		css.push(components.join('.'));

		components.pop();
		components.push('defs');
		defs.push(components.join('.'));
	}

	out('  ]]></script>');

	out('  <style type="text/css"><![CDATA[');

	for (i = 0; i < css.length; i++) {
		try {
			mod_fs.statSync(css[i]);
		} catch (err) {
			continue;
		}

		try {
			text = mod_fs.readFileSync(css[i], 'utf8');
		} catch (err) {
			fatal('couldn\'t load CSS file %s: %s', css[i], err);
		}

		out('%s', text);
	}

	out('  ]]></style>');

	for (i = 0; i < defs.length; i++) {
		try {
			mod_fs.statSync(defs[i]);
		} catch (err) {
			continue;
		}

		try {
			text = mod_fs.readFileSync(defs[i], 'utf8');
		} catch (err) {
			fatal('couldn\'t load SVG definition file %s: %s',
			    defs[i], err);
		}

		out('%s', text);
	}

	out('</defs>');
};

var outputVariables = function (obj)
{
	var field;

	out('<defs>');
	out('  <script type="application/ecmascript"><![CDATA[');

	for (field in obj) {
		mod_assert(field.indexOf('g_') != -1);

		out('var %s = %s;', field, dump(obj[field]));
	}

	out('  ]]></script>');
	out('</defs>');
};

var outputIcon = function (icon, props, onclick)
{
	var file, text;

	try {
		file = require.resolve('../lib/icons/' + icon + '.svg');
		text = mod_fs.readFileSync(file, 'utf8');
	} catch (err) {
		fatal('couldn\'t load icon %s: %s', file, err);
	}

	out('<svg x="%dpx" y="%dpx" width="%dpx" height="%dpx" onclick="%s">\n',
	    props.x, props.y, props.width, props.height, onclick);
	out('<rect x="0px" y="0px" width="%dpx" ' +
	    'height="%dpx" onclick="%s" class="button" />\n',
	    props.width, props.height, onclick);
	out('%s', text);

	out('</svg>');
};

var outputControls = function (props)
{
	var i;
	var width = props.width / 4;
	var iprops = { x: 0, y: 0, width: width, height: width };

	var icons = [
	    [ 'arrow-left-l', 'pan(50, 0)' ],
	    [ 'zoom-in', 'zoom(1.25)' ],
	    [ 'zoom-out', 'zoom(0.8)' ],
	    [ 'arrow-right-l', 'pan(-50, 0)' ]
	];

	out('<svg x="%dpx" y="%dpx" width="%dpx" height="%dpx">\n',
	    props.x, props.y, props.width, props.height);

	for (i = 0; i < icons.length; i++)  {
		outputIcon(icons[i][0], iprops, icons[i][1]);
		iprops.x += width;
	}

	out('</svg>');
};

var outputLegend = function (props, states)
{
	var x = props.x;
	var y = props.y;
	var height = props.height;
	var width = props.width;

	for (var state in states) {
		out('<rect x="%d" y="%d" width="%d" height="%d" ' +
		    'id="statemap-legend-%s" ' +
		    'class="statemap-legend" style="fill:%s" />',
		    x, y, width, height, state, states[state].color);
		y += height + 10;

		out('<text x="%d" y="%d" class="statemap-legendlabel ' +
		    'sansserif">%s</text>', x + (width / 2), y,
		    states[state].name);
		y += 10;
	}
};

var isDatum = function (datum)
{
	if (!datum.entity)
		return (false);

	if (datum.description)
		return (true);

	if (!datum.time)
		return (false);

	if (typeof (datum.time) == typeof (''))
		datum.time = parseInt(datum.time, 10);

	return (true);
};

var filteredDatum = function (config, datum)
{
	if (datum.time < config.begin)
		return (true);

	if (config.end && datum.time > config.end)
		return (true);

	return (false);
};

var statemap = function (config, input)
{
	var maps = {}, states = {};
	var latest = undefined, data, datum;
	var state, value;
	var i, j;
	var sortby = -1;

	if (!config.hasOwnProperty('begin'))
		config.begin = 0;

	if (!config.hasOwnProperty('end'))
		config.end = 0;

	if (config.sortby && config.sortby != 'entity') {
		if (!input.states[config.sortby]) {
			fatal('cannot sort by state "%s": no such state',
			    config.sortby);
		}

		sortby = input.states[config.sortby].value;
	}

	check(input, 'data');
	check(input, 'states');

	data = input.data;

	if (input.title)
		config.title = input.title;

	if (input.start) {
		if (!(input.start instanceof Array) ||
		    input.start.length != 2 ||
		    typeof (input.start[0]) != typeof (1) ||
		    typeof (input.start[1]) != typeof (input.start[0])) {
			fatal('when present, "start" property must be a ' +
			    'two element array');
		}

		config.start = input.start;
	}

	if (input.entityKind) {
		config.entityKind = input.entityKind;
	} else {
		config.entityKind = 'Entity';
	}

	for (state in input.states) {
		if (input.states[state].hasOwnProperty('value')) {
			value = input.states[state].value;
		} else {
			value = state;
		}

		states[value] = input.states[state];
		states[value].name = state;
	}

	stateColors(states);

	config.entities = {};
	config.entityPrefix = 'statemap-entity-';

	for (i = 0; i < data.length; i++) {
		datum = data[i];

		if (!config.entities[datum.entity])
			config.entities[datum.entity] = {};

		if (datum.description) {
			config.entities[datum.entity].description =
			    datum.description;
			continue;
		}

		if (!maps[datum.entity]) {
			maps[datum.entity] = [ datum ];
		} else {
			maps[datum.entity].push(datum);
		}

		if (!latest || datum.time + datum.duration >
		    latest.time + latest.duration) {
			latest = datum;
		}
	}

	var timeWidth = (latest.time + latest.duration) - config.begin;

	var keys = Object.keys(maps);
	var weight = {};

	if (sortby != -1) {
		for (i = 0; i < keys.length; i++) {
			var key = keys[i];
			weight[key] = 0;

			for (j = 0; j < maps[key].length; j++)
				weight[key] += maps[key][j].states[sortby];
		}
	}

	keys.sort(function (lhs, rhs) {
		if (sortby != -1) {
			if (weight[lhs] < weight[rhs])
				return (1);

			if (weight[lhs] > weight[rhs])
				return (-1);
		}

		return (lhs.localeCompare(rhs, [], { numeric: true }));
	});

	var lmargin = 138, tmargin = 60;

	var height = (keys.length * config.stripHeight) + tmargin;
	var width = config.stripWidth;

	out('<?xml version="1.0"?>');
	out('<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"');
	out('"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">');
	out('<svg width="%d" height="%d"', width, height);
	out('  xmlns="http://www.w3.org/2000/svg"');
	out('  version="1.1"');
	out('  onload="init(evt)">');

	config.pixelWidth = width - lmargin;
	config.pixelHeight = height - tmargin;
	config.timeWidth = timeWidth;
	config.states = states;
	config.y = 0;
	config.lmargin = lmargin;
	config.tmargin = tmargin;

	loadLibs(config);

	out('<svg x="%dpx" y="%dpx" width="%dpx" height="%dpx">\n',
	    lmargin, tmargin, config.pixelWidth, height - tmargin);

	out('<g id="statemap" transform="matrix(1 0 0 1 0 0)">');

	var map = {};

	for (i = 0; i < keys.length; i++) {
		config.entity = keys[i];
		map[config.entity] = outputMap(maps[keys[i]], config);
		config.y += config.stripHeight;
	}

	out('</g>');
	out('</svg>');

	outputVariables({ g_data: map });

	/*
	 * The border around our statemap.
	 */
	out('<polygon class="statemap-border" ');
	out('  points="%d %d, %d %d, %d %d, %d %d"/>',
	    lmargin, tmargin, lmargin + config.pixelWidth, tmargin,
	    lmargin + config.pixelWidth, height, lmargin, height);

	if (config.title) {
		out('<text x="%d" y="%d" class="statemap-title sansserif"> ' +
		    '%s</text>', lmargin +
		    (config.pixelWidth / 2), 16, config.title);
	}

	out('<text x="%d" y="%d" class="statemap-timelabel sansserif" ' +
	    'id="statemap-timelabel"></text>', lmargin +
	    (config.pixelWidth / 2), 34);

	out('<line x1="%d" y1="%d" x2="%d" y2="%d"', lmargin + 10, 40,
	    lmargin + config.pixelWidth - 10, 40);
	out('class="statemap-timeline" />');

	var props = { x: 20, y: tmargin, height: 45, width: lmargin };
	props.width -= (2 * props.x) + 10;

	outputControls(props);

	props.y += props.height;
	props.height = 15;
	outputLegend(props, states);

	out('<!-- %j !-->', states);
	out('<!-- coalesced: %d !-->', config.coalesced);
	out('</svg>');
};

var parseOffset = function (option, optstr, arg)
{
	var re = /^(\d*\.?\d*)(ms|us|s|ns|sec|$)$/;
	var match = re.exec(arg);
	var mult = 1;
	var units, val;

	if (!match) {
		throw (new Error(mod_util.format('value for "%s" is not a ' +
		    'valid expression of time: "%s"', optstr, arg)));
	}

	units = match[2];

	if (units == 's' || units == 'sec') {
		mult = 1000000000;
	} else if (units == 'ms') {
		mult = 1000000;
	} else if (units == 'us') {
		mult = 1000;
	}

	val = parseFloat(match[1]);

	if (mult == 1 && Math.floor(val) != val) {
		throw (new Error(mod_util.format('value for "%s" must be an ' +
		    'integer when in nanoseconds', optstr)));
	}

	return (Math.floor(parseFloat(match[1]) * mult));
};

var main = function ()
{
	var file, stream;

	var config = {
		begin: 0,
		end: 0,
		stripHeight: 10,
		stripWidth: 1000,
		libs: [ 'statemap-svg.js' ]
	};

	var opts = [ {
		names: [ 'begin', 'b' ],
		type: 'offset',
		help: 'time offset at which to begin statemap'
	}, {
		names: [ 'end', 'e' ],
		type: 'offset',
		help: 'time offset at which to end statemap'
	}, {
		names: [ 'duration', 'd' ],
		type: 'offset',
		help: 'time duration of statemap'
	}, {
		names: [ 'coalesce', 'c' ],
		type: 'number',
		help: 'coalesce target'
	}, {
		names: [ 'stateHeight', 'h' ],
		type: 'number',
		help: 'height of each state, in pixels'
	}, {
		names: [ 'sortby', 's' ],
		type: 'string',
		help: 'state to sort by (defaults to entity name)'
	} ];

	mod_dashdash.addOptionType({
		name: 'offset',
		takesArg: true,
		helpArg: 'OFFSET',
		parseArg: parseOffset
	});

	var parser = mod_dashdash.createParser({ options: opts });

	try {
		opts = parser.parse(process.argv);
	} catch (err) {
		fatal(err.message);
	}

	if (opts.duration) {
		if (opts.begin && opts.end)
			fatal('cannot specify all of begin, end, and duration');

		if (!opts.begin && !opts.end)
			config.end = opts.duration;

		if (opts.begin && !opts.end) {
			config.begin = opts.begin;
			config.end = opts.begin + opts.duration;
		}

		if (!opts.begin && opts.end) {
			if (opts.end > opts.duration)
				fatal('end offset cannot exceed duration');

			config.begin = opts.end - opts.duration;
			config.end = opts.end;
		}
	} else {
		if (opts.begin && opts.end && opts.end < opts.begin)
			fatal('begin offset must be less than end offset');

		if (opts.begin)
			config.begin = opts.begin;

		if (opts.end)
			config.end = opts.end;
	}

	if (!opts._args || opts._args.length != 1)
		fatal('must specify a data file');

	if (opts.coalesce)
		config.maxrect = opts.coalesce;

	if (opts.stateHeight)
		config.stripHeight = Math.floor(opts.stateHeight);

	if (opts.sortby)
		config.sortby = opts.sortby;

	file = opts._args[0];

	stream = mod_fs.createReadStream(file).pipe(mod_concatjson.parse());

	stream.on('error', function (err) {
		fatal('couldn\'t parse ' + file + ': ' + err);
	});

	stream.on('data', function (obj) {
		if (isDatum(obj))
			fatal('expected metadata as first payload');

		obj.data = [];

		config.coalesced = mod_statemap.ingest(file, function (datum) {
			obj.data.push(datum);
		}, config);

		statemap(config, obj);
		process.exit(0);
	});
};

main();
